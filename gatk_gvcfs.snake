configfile: "config.yaml"

from os.path import *
import glob


FILES = glob.glob(config["input_dir"] + "DRG_037/**/DRG_037-F01_LIBx1_FINAL_b37_PE.aln.RG.dupes_marked.bam", recursive = True)

d = {}
for f in FILES:
	d[basename(f)[:-4]] = f

rule all:
	input:
		[
			config["path_logs"] + s + ".gatk_gvcf_validation" for s in d.keys()
		]



rule BaseRecalibrator:
	input:
		bam = config["dest_dir_BAMs"] + "{sample}.clean.bam",
		index = config["dest_dir_BAMs"] + "{sample}.clean.bam.bai",
		ref = config["ref_fa"]
	benchmark:
		config["path_benchmark"] + "{sample}.BaseRecalibrator.benchmark.txt"
	output:
		config["path_BQSR"] + "{sample}.recal_table"
	shell:
		"gatk --java-options '-Xmx12G -Djava.io.tmpdir=/tmp' BaseRecalibrator -R {input.ref}  "
		"-I {input.bam} "
		"--known-sites " + config["dir_bundle_GATK"] + "hg38/dbsnp_146.hg38.vcf.gz "
		"--known-sites " + config["dir_bundle_GATK"] + "hg38/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz "
		"--known-sites " + config["dir_bundle_GATK"] + "hg38/1000G_phase1.snps.high_confidence.hg38.vcf.gz "
		"-O {output}"

rule ApplyBQSR:
	input:
		bam = config["dest_dir_BAMs"] + "{sample}.clean.bam",
		index = config["dest_dir_BAMs"] + "{sample}.clean.bam.bai",
		ref = config["ref_fa"],
		recal_table = config["path_BQSR"] + "{sample}.recal_table"
	benchmark:
		config["path_benchmark"] + "{sample}.ApplyBQSR.benchmark.txt"
	output:
		config["dest_dir_BAMs"] + "{sample}.recal.bam"
	shell:
		"gatk --java-options '-Xmx12G -Djava.io.tmpdir=/tmp' ApplyBQSR -R {input.ref} "
		"-I {input.bam} "
		"--bqsr-recal-file {input.recal_table} "
		"-O {output}"

rule HaplotypeCaller:
	input:
		bam = config["dest_dir_BAMs"] + "{sample}.recal.bam",
		index = config["dest_dir_BAMs"] + "{sample}.clean.bam.bai",
		ref = config["ref_fa"],
		recal_table = config["path_BQSR"] + "{sample}.recal_table"
	benchmark:
		config["path_benchmark"] + "{sample}.HaplotypeCaller.benchmark.txt"
	output:
		config["dest_dir_VCFs"] + "{sample}.gatk.g.vcf.gz"
	shell:
		"gatk --java-options '-Xmx12G -Djava.io.tmpdir=/tmp' HaplotypeCaller -R {input.ref} "
		"-I {input.bam} "
		"-ERC GVCF "
		"--dbsnp " + config["dir_bundle_GATK"] + "hg38/dbsnp_146.hg38.vcf.gz "
		"-O {output} "
#"-pairHMM LOGLESS_CACHING "

rule ValidateVariants:
	input:
		gvcf = config["dest_dir_VCFs"] + "{sample}.gatk.g.vcf.gz",
		ref = config["ref_fa"]
	benchmark:
		config["path_benchmark"] + "{sample}.gatk_gvcf_validation.benchmark.txt"
	output:
		config["path_logs"] + "{sample}.gatk_gvcf_validation"
	shell:
		"gatk --java-options '-Xmx12G -Djava.io.tmpdir=/tmp' ValidateVariants -R {input.ref} "
		"-V {input.gvcf} "
		"--validation-type-to-exclude ALL > {output} "




# snakemake -s gatk_gvcfs.snake -npF

