configfile: "config.yaml"

from os.path import *
import glob




rule all:
	input:
		[
			# config["dest_dir_VCFs"] + "my_database_" + c for c in config["chromosomes"]
			config["dest_dir_VCFs"] + "joint_" + c + "_gatk.vcf" for c in config["chromosomes"]
		]


rule Consolidate_GVCFs:
	input:
		gvcfs = sorted(glob.glob(config["dest_dir_VCFs"] + "*.gatk.g.vcf.gz"))
	params:
		chrom = lambda wildcards: wildcards.chrom,
		V_command = lambda wildcards, input: expand( "-V {f}", f = input.gvcfs )
	benchmark:
		config["path_benchmark"] + "Consolidate_GVCFs_{chrom}.benchmark.txt"
	output:
		directory(config["dest_dir_VCFs"] + "my_database_{chrom}")
	shell:
		"gatk --java-options '-Xmx32G -Djava.io.tmpdir=/tmp' GenomicsDBImport "
		"{params.V_command} "
		# "-V " + " -V ".join( glob.glob(config["dest_dir_VCFs"] + "*.gatk.g.vcf.gz") ) + " "
		"--genomicsdb-workspace-path {output} "
		"-L {params.chrom}"


rule GenotypeGVCFs:
	input:
		database = config["dest_dir_VCFs"] + "my_database_{chrom}",
		ref = config["ref_fa"]
	benchmark:
		config["path_benchmark"] + "GenotypeGVCFs_{chrom}.benchmark.txt"
	output:
		config["dest_dir_VCFs"] + "joint_{chrom}_gatk.vcf"
	shell:
		"gatk --java-options '-Xmx32G -Djava.io.tmpdir=/tmp' GenotypeGVCFs "
		"-R {input.ref} "
		"-V gendb://{input.database} "
		"-new-qual true "
		"--dbsnp " + config["dir_bundle_GATK"] + "hg38/dbsnp_146.hg38.vcf.gz "
		"-O {output} "



# gatk GenotypeGVCFs \
#     -R data/ref/ref.fasta \
#     -V gendb://my_database \
#     -newQual \
#     -O test_output.vcf 


# rule ValidateVariants:
# 	input:
# 		gvcf = config["dest_dir_VCFs"] + "{sample}.gatk.g.vcf.gz",
# 		ref = config["ref_fa"]
# 	benchmark:
# 		config["path_benchmark"] + "{sample}.gatk_gvcf_validation.benchmark.txt"
# 	output:
# 		config["path_logs"] + "{sample}.gatk_gvcf_validation"
# 	shell:
# 		"gatk --java-options '-Xmx12G -Djava.io.tmpdir=/tmp' ValidateVariants -R {input.ref} "
# 		"-V {input.gvcf} "
# 		"--validationTypeToExclude ALL > {output} "




# snakemake -s gatk_joint_genotyping.snake -np

